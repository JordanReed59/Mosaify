name: "Terraform Deploy"
on:
  push:
    branches:    
      - '**'
    tags-ignore:
      - '**'
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
  AWS_TF_ROLE: ${{ secrets.AWS_TF_ROLE }}
  GITHUB_BRANCH_NAME: ${{ github.ref_name }}

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .aws/terraform
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set ENV variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Using QA Role"
            echo "AWS_ROLE=${{ secrets.AWS_QA_ROLE }}" >> $GITHUB_ENV
            echo "ENV=qa" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "Using Test Role"
            echo "AWS_ROLE=${{ secrets.AWS_TEST_ROLE }}" >> $GITHUB_ENV
            echo "ENV=test" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/feature/* || $GITHUB_REF == refs/heads/bugfix/* || $GITHUB_REF == refs/heads/task/* || $GITHUB_REF == refs/heads/hotfix/* ]]; then
            echo "Using Dev Role"
            echo "AWS_ROLE=${{ secrets.AWS_DEV_ROLE }}" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "Invalid branch name. Stopping the action."
            exit 1
          fi

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="workspace_key_prefix=${REPO_NAME}" -backend-config="role_arn=${AWS_TF_ROLE}"

      - name: Terraform Workspaces
        id: workspaces
        run: |
          chmod +x ../../.github/workflows/utils/workspaces.sh
          source ../../.github/workflows/utils/workspaces.sh $GITHUB_BRANCH_NAME

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Variables
        id: variables
        run: |
          echo "TF_VAR_repo=${REPO_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_environment=${ENV}" >> $GITHUB_ENV
          echo "TF_VAR_branch=${GITHUB_BRANCH_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_region=${AWS_REGION}" >> $GITHUB_ENV

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  apply:
    needs: plan
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .aws/terraform
    outputs:
      ENCRYPTED_S3_BUCKET_NAME: ${{ steps.outputs.outputs.ENCRYPTED_S3_BUCKET_NAME }}
      API_INVOKE_URL: ${{ steps.outputs.outputs.API_INVOKE_URL }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set ENV variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Using QA Role"
            echo "AWS_ROLE=${{ secrets.AWS_QA_ROLE }}" >> $GITHUB_ENV
            echo "ENV=qa" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            echo "Using Test Role"
            echo "AWS_ROLE=${{ secrets.AWS_TEST_ROLE }}" >> $GITHUB_ENV
            echo "ENV=test" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/feature/* || $GITHUB_REF == refs/heads/bugfix/* || $GITHUB_REF == refs/heads/task/* || $GITHUB_REF == refs/heads/hotfix/* ]]; then
            echo "Using Dev Role"
            echo "AWS_ROLE=${{ secrets.AWS_DEV_ROLE }}" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "Invalid branch name. Stopping the action."
            exit 1
          fi

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.2
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}" -backend-config="workspace_key_prefix=${REPO_NAME}" -backend-config="role_arn=${AWS_TF_ROLE}"

      - name: Terraform Workspaces
        id: workspaces
        env:
          GITHUB_BRANCH_NAME: ${{ github.ref_name }}
        run: |
          chmod +x ../../.github/workflows/utils/workspaces.sh
          source ../../.github/workflows/utils/workspaces.sh $GITHUB_BRANCH_NAME

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Variables
        id: variables
        run: |
          echo "TF_VAR_repo=${REPO_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_environment=${ENV}" >> $GITHUB_ENV
          echo "TF_VAR_branch=${GITHUB_BRANCH_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_region=${AWS_REGION}" >> $GITHUB_ENV

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Terraform Outputs
        id: outputs
        run: |
          JSON=$(terraform output -json | jq -r '.')
          echo $JSON
          S3_BUCKET_NAME=$(echo $JSON | jq -r '.s3_bucket_name.value')
          API_INVOKE_URL=$(echo $JSON | jq -r '.api_invoke_url.value')
          echo "bucket name: ${S3_BUCKET_NAME}"
          echo "api invoke url: ${S3_BUCKET_NAME}"

          BINARY_ENCRYPTED_SECRET=$(echo -n "$S3_BUCKET_NAME" | openssl enc -aes-256-cbc -pbkdf2 -salt -k "${{ secrets.ENCRYPTION_PASSWORD }}");
          ENCRYPTED_S3_BUCKET_NAME=$(echo -n "$BINARY_ENCRYPTED_SECRET" | base64 -w 0);
          echo $ENCRYPTED_S3_BUCKET_NAME

          echo "ENCRYPTED_S3_BUCKET_NAME=\"$ENCRYPTED_S3_BUCKET_NAME\"" >> $GITHUB_OUTPUT

      #     echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT
      #     echo "API_INVOKE_URL=${API_INVOKE_URL}" >> $GITHUB_OUTPUT
      #     grep --version
      #     jq --version
      #     terraform output -json
      #     output=$(terraform output -json 2>&1 | grep -oE '{[^}]+}' | sed 's/\\"/"/g')
      #     echo "$output"
      #     terraform output -json
          # S3_BUCKET_NAME=$(terraform output -json | jq -r '.s3_bucket_name.value')
          # echo "the bucket name: ${S3_BUCKET_NAME}"
      #     echo "S3_BUCKET_NAME=${S3_BUCKET_NAME}" >> $GITHUB_OUTPUT

      # -

  post-deploy:
    needs: [plan, apply]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: src/frontend/mosaify

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Get outputs
        env:
          ENCRYPTED_S3_BUCKET_NAME: ${{ needs.apply.outputs.ENCRYPTED_S3_BUCKET_NAME }}
        #   API_INVOKE_URL: ${{ needs.apply.outputs.API_INVOKE_URL }}
        run: |
          echo "${ENCRYPTED_S3_BUCKET_NAME//\"}"
          BINARY_DENCRYPTED_S3_BUCKET_NAME=$(echo -n "$ENCRYPTED_S3_BUCKET_NAME" | base64 --decode);
          S3_BUCKET_NAME=$(echo -n "$BINARY_DENCRYPTED_S3_BUCKET_NAME" | openssl enc -aes-256-cbc -pbkdf2 -d -salt -k "${{ secrets.ENCRYPTION_PASSWORD }}");
          echo $S3_BUCKET_NAME
  #     - name: Configure AWS credentials from AWS account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         role-session-name: GitHub-OIDC-TERRAFORM

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '21.x'

  #     - name: Add .env
  #       run: |
  #         touch .env
  #         echo 'REACT_APP_SPOTIFY_CLIENT_ID = ${{ secrets.SPOTIFY_CLIENT_ID }}' >> .env
  #         echo 'REACT_APP_REDIRECT_URI = ${{ secrets.SPOTIFY_CLIENT_SECRET }}' >> .env
  #         echo 'REACT_APP_API_URL = ${{ secrets.NEXTAUTH_URL }}' >> .env

  #     - name: Install node
  #       run: npm install

  #     - name: Build node app
  #       run: npm run build

  #     - name: Copy files to the test website with the AWS CLI
  #       env:
  #           AWS_STATIC_BUCKET_NAME: "mosaify-static-page"
  #       run: aws s3 sync ./build s3://$AWS_STATIC_BUCKET_NAME